#*******
#* Read input from STDIN
#* Use print to output your result to STDOUT.
#* Use sys.stderr.write() to display debugging information to STDERR
#* ***/
import sys

elevations = list(map(int, ("9940 6375 3744 3705 3011 4955 6045 6458 6009 4415 4512 4835 7391 6822 7526 5768 6138 3852 5423 5761 7354 4928 4682 3782 6527 6813 5470 4361 2385 3775 2389 4486 3387 4511 2730 3297 2723 3255 2158 2747 2801 5162 5335 6839 5319 6029 6863 9249 8665 6093 4972 3039 3237 3733 4215 4221 3336 5850 7193 7870 5987 4878 4839 5441 5849 4624 3210 3742 5587 5550 5820 4454 5356 4671 6216 5921 7427 6104 6860 3935 3591 3946 4151 4895 4201 6818 6364 6001 5566 6954 7533 7396 5043 5604 5634 5616 5208 4521 3914 4389 5202 6394 6228 4924 3595 2663 3264 5138 5600 4240 2912 4176 6023 5805 4928 3134 5151 5879 6812 5292 4074 5399 5932 4988 4923 4774 7045 6320 5264 4062 2764 2972 3424 3078 2899 3735 5169 5980 4693 3255 4425 4613 4898 5597 4277 6004 5180 6655 6200 5325 5972 4663 4887 4923 4941 5391 3340 5405 4678 4905 3688 4825 5963 5579 4135 2914 3204 2405 3592 4012 4222 5100 4491 7035 4232 5842 4893 7627 5833 6685 5479 7388 5111 3882 3506 3244 5703 3625 4871 3624 5858 5967 6979 4905 4038 4600 4599 7075 7075 9664 6512 3573 2813 5605 6769 4803 3802 5303 5362 4530 4873 5483 5429 5207 5614 6955 5792 4673 5159 5260 5292 3941 2624 3217 4588 6232 7875 7357 6487 5190 3969 4832 4011 5982 5520 6556 6207 7248 7235 7481 4929 5974 5594 7786 5762 3884 4250 6693 7304 5376 4985 5134 5550 3971 4432 6330 6092 5958 5710 5621 4061 2926 3618 4664 5958 6281 6289 3347 1565 499 3251 3538 6562 4678 5832 3379 2688 2403 3412 3552 5568 4840 4570 2789 1981 2856 3611 6247 8131 9161 7296 5095 2291 2930 3825 6202 7903 7813 5740 2761 2321 4837 6028 8148 5986 4525 1494 1339 2976 5314 6771 6459 4084 1637 2888 4841 8117 7598 8299 5640 4261 2800 5184 4802 6365 4618 7393 6591 8192 5264 5652 4045 7099 5480 7137 5642 6899 7083 5648 4351 1406 3453 4868 6603 6726 7211 7516 5576 4817 4622 4228 2834 1336 1535 1254 2884 5489 7169 5630 3422 1645 3479 3377 5866 5667 6494 4720 4456 4871 4610 2747 1887 2357 5046 5458 6724 4175 4148 3067 3045 1999 1808 3455 5118 4098 5096 4691 6119 3488 5153 3642 5746 3000 4999 2770 3775 2549 3054 3632 6042 7170 6837 3679 3779 3107 3190 3414 3578 3565 1550 3439 4308 7413 6818 6707 6804 7345 6614 6579 4530 6570 6172 6095 6468 4018 6132 6492 8643 7487 7773 7846 8654 6503 4584 3554 5285 6839 5930 6044 5028 5160 4978 4377 5832 6075 6024 5440 3656 3776 3951 5679 6442 6666 5370 6627 4760 5281 4147 4272 4757 5262 5758 3534 2860 4941 6069 6181 5744 7182 7552 6562 6452 7797 6870 4734 2322 4068 4588 6260 6162 7735 6444 5825 5183 4137 3674 2485 4949 4005 3378 2720 3001 3630 1742 2253 2675 4336 5759 6451 5630 5875 5328 5732 3130 2971 4104 4890 6230 4282 3449 1017 3479 4018 4910 4545 6983 6485 5008 4166 5775 7709 6195 4884 2875 4125 4433 5117 5910 6376 5325 2908 4144 6694 9350 7074 4083 3330 3332 5493 3367 3430 1097 1971 4032 4712 4352 2642 4457 4775 3693 2214 4333 5459 6230 5310 6823 5874 4324 4373 5819 7475 4983 4758 4867 6316 6533 7261 7951 8084 6722 4446 5009 5357 7256 6598 5418 4205 2694 2096 3675 5377 5028 4280 4745 6073 5482 4849 3714 5359 4362 6219 6357 7902 6621 6963 4376 3823 3707 6544 8987 6772 3984 4304 6138 6269 4574 4388 5046 3842 4535 4516 7137 4446 4821 3824 3454 2541 1586 3653 6074 8442 8478 6780 5909 5452 5391 6434 6550 6936 4085 2582 2431 2774 2901 1818 3274 5627 6633 5313 5097 5188 6862 4746 4406 2170 3115 4442 4752 5828 4101 3983 3869 4185 4744 5005 4185 6154 3456 4154 2787 3998 3350 2180 3790 4904 5789 3357 2301 1385 4078 4545 6708 4897 5716 4482 5968 7124 6043 4963 2684 5329 5448 7240 7268 6627 4443 1927 2104 4694 4337 6195 4865 6071 3789 4031 3523 5371 4300 3487 2715 3181 3516 3740 4888 5086 6064 5442 5556 5313 4814 5595 5547 7525 8143 7517 6692 7192 7682 6285 5153 5549 5747 5538 3512 3069 3641 4723 6646 6257 5792 3388 5087 4141 5981 5330 7241 5289 4155 3861 5247 5883 6354 8243 8578 8949 6233 4809 2167 4776 6519 6101 3703 1239 1672 1044 2884 2932 6023 5518 6939 4721 5416 6213 6632 7288 6223 6351 5459 4083 3037 1480 1077 2010 3885 5611 4164 4724 3121 6272 4942 6544 6496 6929 8300 8102 7698 6941 6546 6104 5276 4517 3505 3047 2491 5588 6424 8111 8028 8296 6513 6558 5095 6270 4123 4647 5132 5067 5037 4546 4627 4306 4210 4048 5488 3451 3717 1856 1720 2972 2520 3936 3203 4886 4983 6657 7237 6075 4243 3147 5684 6132 7956 5978 6177 4017 6389 6188 7513 5507 4684 2431 2475 2849 5850 6422 5262 2359 2183 4271 4441 3224 1897 1868 1616 2796 2772 4779 4389 7359 8334 7396 6497 4695 6871 5583 7181 4108 4846 3880 4873 4002 3467 5222 6320 5939 3538 3484 4839 5128 4799 3489 3649 3464 2578 4463 4406 5709 3711 3710 2740 2549 3578 2944 3865 3703 3868 3752 2980 5172 4929 6739 6966 7990 7866 5289 4534 2305 4918 4494 5192 2698 2970 3168 3207 5174 3617 3960 1048 1622 2782 4637 6934 5804 6905 5360 6243 3948 5139 4671 4238 2049 2055 2253 2993 2925 4114 4793 4415 4179 2695 3102 3127 3287 3929 5035 6384 7378 5672 6619 5093 5385 5698 7898 8984 8751 7798 8060 8260 9217 8799 7369 5181 3275 1840 2877 5151 5156 5065 5560 6595 7413 7211 6032 6226 6068 9117 8858 9243 6397 6396 6445 8007 7108 4892 3634 3515 3118 3727 4094 5597 6048 3961 4721 4779 7157 6569 5445 4883 4450 5586").split(" ")))

up = 0
down = 0
going_up = elevations[0] < elevations[1]
going_down = elevations[0] > elevations[1]

sys.stderr.write(" ".join(map(str, elevations)) + "\n")

for i, e in enumerate(elevations[1:]):
    sys.stderr.write("%d vs %d\n" % (elevations[i], e))
    if going_up:
        sys.stderr.write("pour l'instant ça monte\n")
    if going_down:
        sys.stderr.write("pour l'instant ça descend\n")
    if elevations[i] < e and going_down:
        up += 1
    if elevations[i] > e and going_up:
        down += 1
    going_up = elevations[i] < e
    going_down = elevations[i] > e
    
print("%d %d" % (up, down))
    # sys.stderr.write("%d : %d\n" % (i, e))